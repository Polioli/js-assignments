{"version":3,"sources":["webpack:///./src/todolist_item.ts"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,cAAc;AACxG;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,kBAAkB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"todoItem.bundle.js","sourcesContent":["class ToDoListItem {\n    constructor(parentNode, item) {\n        this.isComplete = false;\n        Object.assign(this, item);\n        this.parentNode = parentNode;\n        this.node = null;\n        this.initMarkup(item);\n        this.initEvents();\n    }\n    initMarkup(item) {\n        let itemNode = document.createElement(\"li\");\n        itemNode.classList.add(\"item-wrap\");\n        let checkedStatus = \"\";\n        if (item.isComplete) {\n            itemNode.classList.add(\"item-complete\");\n            checkedStatus = \"checked\";\n        }\n        itemNode.innerHTML = `\n      <div role=\"checkbox\" class=\"icon-button colored-icon-button checkbox js-complete\" ${checkedStatus}>\n        <i class=\"material-icons material-spec-icon done\" title=\"Check it done\">check_box</i>\n        <i class=\"material-icons material-spec-icon in-progress\" title=\"Check it done\">check_box_outline_blank</i>\n      </div>\n      <input class=\"item-text-field js-update\" value=\"${item.name}\" readonly>\n      <button class=\"icon-button colored-icon-button js-remove\">\n        <i class=\"material-icons material-spec-icon\" title=\"Remove item\">clear</i>\n      </button>`;\n        itemNode.dataset.id = item.id;\n        this.parentNode.appendChild(itemNode);\n        this.node = itemNode;\n        this.inputNode = itemNode.querySelector(\".js-update\");\n    }\n    initEvents() {\n        this.node.querySelector(\".js-complete\").addEventListener(\"click\", this.toggleCompleteEvent.bind(this));\n        this.node.querySelector(\".js-remove\").addEventListener(\"click\", this.removeEvent.bind(this));\n        this.inputNode.addEventListener(\"click\", (ev) => {\n            if (this.isComplete)\n                return;\n            ev.currentTarget.readOnly = false;\n        });\n        this.inputNode.addEventListener(\"change\", this.updateEvent.bind(this));\n        this.inputNode.addEventListener(\"keydown\", (ev) => {\n            this.node.classList.remove(\"error\");\n            if (ev.keyCode == 27) {\n                ev.target.value = this.name;\n                this.inputNode.blur();\n                return;\n            }\n            if (ev.keyCode == 13) {\n                if (ev.target.value.length == 0) {\n                    ev.preventDefault();\n                    this.node.classList.add(\"error\");\n                    return;\n                }\n            }\n        });\n        this.inputNode.addEventListener(\"blur\", (ev) => {\n            ev.currentTarget.readOnly = true;\n        });\n        this.inputNode.addEventListener(\"keypress\", (ev) => {\n            this.node.classList.remove(\"error\");\n        });\n    }\n    sendUpdateStatus() {\n        this.parentNode.dispatchEvent(new CustomEvent(\"todos.itemWasUpdated\"));\n    }\n    getData() {\n        return {\n            id: this.id,\n            name: this.name,\n            isComplete: this.isComplete\n        };\n    }\n    removeEvent() {\n        this.node.remove();\n        this.parentNode.dispatchEvent(new CustomEvent(\"todos.removeTask\", { detail: this.id }));\n    }\n    toggleCompleteEvent() {\n        if (this.isComplete) {\n            this.node.classList.remove(\"item-complete\");\n        }\n        else {\n            this.node.classList.add(\"item-complete\");\n        }\n        this.isComplete = !this.isComplete;\n        this.sendUpdateStatus();\n    }\n    updateEvent(ev) {\n        if (ev.target.value.length == 0) {\n            ev.preventDefault();\n            this.node.classList.add(\"error\");\n            return;\n        }\n        ev.target.readOnly = true;\n        this.name = ev.target.value;\n        this.sendUpdateStatus();\n    }\n}\nexport default ToDoListItem;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/todolist_item.ts\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}